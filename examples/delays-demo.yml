# Example demonstrating different delay options
# This simulates a realistic user browsing pattern with various delays

- name: HomePage
  method: GET
  url: https://httpbin.org/get?user={{userId}}
  expect_status: 200
  delay: "1s"  # Fixed 1 second delay after this request

- name: BrowseProducts
  method: GET
  url: https://httpbin.org/get?user={{userId}}&page={{randInt 1 5}}
  expect_status: 200
  delay_min: "2s"    # Random delay between 2-5 seconds
  delay_max: "5s"

- name: ViewProduct
  method: GET
  url: https://httpbin.org/get?user={{userId}}&product={{randInt 1 100}}
  expect_status: 200
  delay: "{{randDelay 1000 3000}}ms"  # Random delay using template variable (1-3 seconds)

- name: AddToCart
  method: POST
  url: https://httpbin.org/post
  json_body: |
    {
      "user_id": {{userId}},
      "product_id": {{randInt 1 100}},
      "quantity": {{randInt 1 3}},
      "timestamp": {{epochms}}
    }
  expect_status: 200
  delay_min: "500ms"  # Quick random delay (0.5-1.5 seconds)
  delay_max: "1.5s"

- name: Checkout
  method: POST
  url: https://httpbin.org/post
  json_body: |
    {
      "user_id": {{userId}},
      "action": "checkout",
      "timestamp": {{epochms}}
    }
  expect_status: 200
  # No delay specified - will proceed immediately to next action

- name: OrderConfirmation
  method: GET
  url: https://httpbin.org/get?user={{userId}}&order={{randInt 1000 9999}}
  expect_status: 200
  delay: "3s"  # Longer delay to simulate reading confirmation page 